import os
import json
import platform
import distutils.core
import distutils.util

import pybind11


def build_extension(caller_file, name, sources, headers, release):
    if platform.system() == 'Windows':
        extra_compile_args = ['/std:c++latest']
        if release:
            extra_compile_args.append('/Ox')
        else:
            extra_compile_args.append('/Od')
    else:
        extra_compile_args = ['-ggdb', '-std=c++17']
        if release:
            extra_compile_args.append('-O2')
        else:
            extra_compile_args += [
                '-O0', '-D_GLIBCXX_DEBUG', '-D_GLIBCXX_DEBUG_PEDANTIC']

    # want assertions, even in the release build
    undef_macros = ['NDEBUG']

    caller_file = os.path.abspath(caller_file)
    this_module = os.path.abspath(__file__)
    config_path = os.path.join(
        os.path.dirname(this_module),
        '_compiler_config.json')

    cur_dir = os.getcwd()
    try:
        os.chdir(os.path.dirname(caller_file))

        for filename in sources + headers:
            assert os.path.exists(filename), filename

        # Distutils looks at the timestamps to determine whether the extension
        # should be rebuilt. We want it rebuilt when compiler options change,
        # even if no source file is touched.
        config = '// generated by cpp_utils.py\n' + json.dumps(dict(
            CC=os.getenv('CC'),
            extra_compile_args=extra_compile_args,
            undef_macros=undef_macros), sort_keys=True, indent='  ')
        update_file_content_if_changed(config_path, config)

        ext = distutils.core.Extension(
            name,
            sources,
            depends=headers + [caller_file, config_path, this_module],
            extra_compile_args=extra_compile_args,
            undef_macros=undef_macros,
            include_dirs=[
                pybind11.get_include(user=False),
                pybind11.get_include(user=True),
            ],
            language='c++',
        )

        distutils.core.setup(
            name=name,
            ext_modules=[ext],
            script_args=['--quiet', 'build_ext', '--inplace'],
        )
    finally:
        os.chdir(cur_dir)


def update_file_content_if_changed(filename, content):
    if os.path.exists(filename):
        with open(filename) as f:
            old_content = f.read()
    else:
        old_content = None
    if content != old_content:
        with open(filename, 'w') as f:
            f.write(content)
